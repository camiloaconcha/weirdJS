
Conceptual Aside 
-Syntax Parsers
-Execution Context 
-Lexical Environments:Where the code is wrote

Name / Value Pair : 

Object:
-Object is a colection of Value Pairs

The Global Environment and the global object:
-The global Object in the browsers is the window
    Global Object = this 
-Given the avobe 

-Global:not inside a function
-Execution context : 
-Outer Environment

The Execution context Creation and 'Hoisting': 

-Hoisting is when a variable is in the dom but it can be undefined
 if is a function it shares the value of.

- The Execution context is created in two phases 
    -First is called 'the creation phase'
        -This phase creates:global object, this and outer environment.
        -Setup Memory Space for variables and functions "Hoisting".
        -variables are only saved in memory but not its value , functions are 
         totally in memory , thats the reason why the function console log prints the value 
         but not the variable .
    -Execution phase

Javascript and 'undefined':
In the concept of Hoisting the variables declared are equal to 'undefined' and the undeclared are 'not defined'
-undefined means that the variable hasnt been set but the value undefined is in javascript a value not a String in quotes 

The Execution context: Code Execution
It runs your: Global Object, this , Outer Environment.
-RUNS CODE-

Conceptual Aside : Single Threaded Synchronous Execution
Sigle Threaded :One command at the time an in the order it appears.

Function Invocation and the Execution Stack .

Invocation =  Running a function . 
Global Execution context(created code and code is executed)
Execution stack is the whole.

Every function create a new Execution Context in the execution stack.

Class 15:
Functions , Context , and Variable Environments

Variable Environment: Where the variables live and how to relate each other in memory .
Scope: Where are we able to see de variable.

The Scope Chain : Where can i access a variable  

Scope, ES6 and let: let is defined and executed in runtime

What about asynchronous callbacks?
-asynchronous : more than one at time
-event queue


Types and Javascript

-Dynamic Typing :
Javascript engine figures it out th type of data. this is called dynanic Typing
var isNew = true;//Boolean
isNew = 'yup';//String
isNew = 1; //Number

Primitive Types :
Is a type of data that represents a single value(that is , not an object)

undefined : Represents lack of existence .
boolean : true or false
number : floating point number
string :' ' or " "
null:represents lack of existence
symbol: 


Operators:
A special function that is syntactically(+,-,*,/,<,>), infix notation.

Operator precedence and associativity

Operator precedence : Whis operator function gets called first.
Higher Precedence wins

Associativity :What order operator functions get called in Left -To -Right or 
                right to left , when function have the same precedence

Conceptual Aside:Coercion
-Converting a value from one type to another.

Comparision Operators:
-Equality:
-Strict Equality

Existence and Booleans:
Default Values
Framework Aside:Default Values




